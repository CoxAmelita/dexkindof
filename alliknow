// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IERC20 {
    function transfer(address recipient, uint256 amount) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
}

contract DecentralizedExchange {
    IERC20 public token;
    uint256 public rate = 100; // 1 ETH = 100 tokens

    constructor(address tokenAddress) {
        token = IERC20(tokenAddress);
    }

    function deposit() public payable {}

    function buyTokens() public payable {
        uint256 tokenAmount = msg.value * rate;
        require(token.balanceOf(address(this)) >= tokenAmount, "Not enough tokens in the reserve");
        token.transfer(msg.sender, tokenAmount);
    }

    function sellTokens(uint256 tokenAmount) public {
        require(token.balanceOf(msg.sender) >= tokenAmount, "Not enough tokens");
        uint256 ethAmount = tokenAmount / rate;
        require(address(this).balance >= ethAmount, "Not enough Ether in the reserve");
        token.transferFrom(msg.sender, address(this), tokenAmount);
        payable(msg.sender).transfer(ethAmount);
    }

    function withdraw(uint256 amount) public {
        require(msg.sender == address(this), "Only the contract can withdraw");
        payable(msg.sender).transfer(amount);
    }
}
